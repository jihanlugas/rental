definitions:
  model.CalendarView:
    properties:
      companyId:
        type: string
      createBy:
        type: string
      createDt:
        type: string
      createName:
        type: string
      deleteBy:
        type: string
      deleteDt:
        type: string
      deleteName:
        type: string
      endDt:
        type: string
      id:
        type: string
      name:
        type: string
      propertyId:
        type: string
      propertyName:
        type: string
      startDt:
        type: string
      updateBy:
        type: string
      updateDt:
        type: string
      updateName:
        type: string
    type: object
  model.CalendaritemView:
    properties:
      calendarId:
        type: string
      calendarName:
        type: string
      companyId:
        type: string
      companyName:
        type: string
      createBy:
        type: string
      createDt:
        type: string
      createName:
        type: string
      deleteBy:
        type: string
      deleteDt:
        type: string
      deleteName:
        type: string
      id:
        type: string
      itemId:
        type: string
      itemName:
        type: string
      propertyId:
        type: string
      propertyName:
        type: string
      updateBy:
        type: string
      updateDt:
        type: string
      updateName:
        type: string
    type: object
  model.PropertyView:
    properties:
      companyId:
        type: string
      companyName:
        type: string
      createBy:
        type: string
      createDt:
        type: string
      createName:
        type: string
      deleteBy:
        type: string
      deleteDt:
        type: string
      deleteName:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updateBy:
        type: string
      updateDt:
        type: string
      updateName:
        type: string
    type: object
  request.CreateCalendar:
    properties:
      endDt:
        type: string
      name:
        type: string
      propertyId:
        type: string
      startDt:
        type: string
    required:
    - endDt
    - name
    - propertyId
    - startDt
    type: object
  request.CreateCompany:
    properties:
      name:
        type: string
      userId:
        type: string
    required:
    - name
    - userId
    type: object
  request.CreateItem:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  request.CreateProperty:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  request.ListItem:
    properties:
      companyId:
        maxLength: 200
        type: string
      description:
        maxLength: 200
        type: string
      name:
        maxLength: 200
        type: string
    type: object
  request.ListProperty:
    properties:
      companyId:
        maxLength: 200
        type: string
      description:
        maxLength: 200
        type: string
      name:
        maxLength: 200
        type: string
    type: object
  request.PageItem:
    properties:
      description:
        maxLength: 200
        type: string
      limit:
        type: integer
      name:
        maxLength: 200
        type: string
      page:
        type: integer
    type: object
  request.PageProperty:
    properties:
      description:
        maxLength: 200
        type: string
      limit:
        type: integer
      name:
        maxLength: 200
        type: string
      page:
        type: integer
    type: object
  request.Signin:
    properties:
      passwd:
        maxLength: 200
        type: string
      username:
        type: string
    required:
    - passwd
    - username
    type: object
  request.Timeline:
    properties:
      companyId:
        type: string
      endDt:
        type: string
      startDt:
        type: string
    required:
    - companyId
    - endDt
    - startDt
    type: object
  request.UpdateCalendar:
    properties:
      endDt:
        type: string
      name:
        type: string
      propertyId:
        type: string
      startDt:
        type: string
    required:
    - endDt
    - name
    - propertyId
    - startDt
    type: object
  request.UpdateCompany:
    properties:
      name:
        type: string
      userId:
        type: string
    required:
    - name
    - userId
    type: object
  request.UpdateItem:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  request.UpdateProperty:
    properties:
      description:
        type: string
      name:
        type: string
    required:
    - description
    - name
    type: object
  response.Calendar:
    properties:
      companyId:
        type: string
      createBy:
        type: string
      createDt:
        type: string
      createName:
        type: string
      deleteBy:
        type: string
      deleteDt:
        type: string
      deleteName:
        type: string
      endDt:
        type: string
      id:
        type: string
      name:
        type: string
      propertyId:
        type: string
      propertyName:
        type: string
      startDt:
        type: string
      updateBy:
        type: string
      updateDt:
        type: string
      updateName:
        type: string
    type: object
  response.CalendarDetail:
    properties:
      calendar:
        $ref: '#/definitions/model.CalendarView'
      calendaritems:
        items:
          $ref: '#/definitions/model.CalendaritemView'
        type: array
    type: object
  response.Company:
    properties:
      createBy:
        type: string
      createDt:
        type: string
      createName:
        type: string
      deleteBy:
        type: string
      deleteDt:
        type: string
      deleteName:
        type: string
      id:
        type: string
      name:
        type: string
      updateBy:
        type: string
      updateDt:
        type: string
      updateName:
        type: string
      userId:
        type: string
    type: object
  response.Item:
    properties:
      companyId:
        type: string
      companyName:
        type: string
      createBy:
        type: string
      createDt:
        type: string
      createName:
        type: string
      deleteBy:
        type: string
      deleteDt:
        type: string
      deleteName:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      price:
        type: integer
      updateBy:
        type: string
      updateDt:
        type: string
      updateName:
        type: string
    type: object
  response.List:
    properties:
      label:
        type: string
      value:
        type: string
    type: object
  response.Pagination:
    properties:
      dataPerPage:
        type: integer
      list:
        items:
          type: object
        type: array
      page:
        type: integer
      totalData:
        type: integer
      totalPage:
        type: integer
    type: object
  response.Property:
    properties:
      companyId:
        type: string
      companyName:
        type: string
      createBy:
        type: string
      createDt:
        type: string
      createName:
        type: string
      deleteBy:
        type: string
      deleteDt:
        type: string
      deleteName:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updateBy:
        type: string
      updateDt:
        type: string
      updateName:
        type: string
    type: object
  response.Response:
    properties:
      code:
        type: integer
      message:
        type: string
      payload:
        type: object
      status:
        type: boolean
    type: object
  response.Timeline:
    properties:
      calendars:
        items:
          $ref: '#/definitions/model.CalendarView'
        type: array
      properties:
        items:
          $ref: '#/definitions/model.PropertyView'
        type: array
    type: object
  response.User:
    properties:
      active:
        type: boolean
      createBy:
        type: string
      createDt:
        type: string
      createName:
        type: string
      deleteBy:
        type: string
      deleteDt:
        type: string
      deleteName:
        type: string
      email:
        type: string
      fullname:
        type: string
      id:
        type: string
      lastLoginDt:
        type: string
      noHp:
        type: string
      passVersion:
        type: integer
      photoId:
        type: string
      photoUrl:
        type: string
      role_id:
        type: string
      updateBy:
        type: string
      updateDt:
        type: string
      updateName:
        type: string
      username:
        type: string
    type: object
host: localhost:1323
info:
  contact: {}
  description: This is a sample server celler server.
  title: Swagger Rental App
  version: "1.0"
paths:
  /:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: ようこそ、美しい世界へ
          schema:
            type: string
      summary: Ping
      tags:
      - Ping
  /calendar:
    post:
      consumes:
      - application/json
      parameters:
      - description: json req body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.CreateCalendar'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: To do create new calendar event
      tags:
      - Calendar
  /calendar/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Calendar ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete Calendar
      tags:
      - Calendar
    get:
      consumes:
      - application/json
      parameters:
      - description: Calendar ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                payload:
                  $ref: '#/definitions/response.Calendar'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: To do get a calendar
      tags:
      - Calendar
    put:
      consumes:
      - application/json
      parameters:
      - description: Calendar ID
        in: path
        name: id
        required: true
        type: string
      - description: json req body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.UpdateCalendar'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: To do update a calendar
      tags:
      - Calendar
  /calendar/detail/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: Calendar ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                payload:
                  $ref: '#/definitions/response.CalendarDetail'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: To do get a calendar detail
      tags:
      - Calendar
  /calendar/timeline:
    post:
      consumes:
      - application/json
      parameters:
      - description: json req body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.Timeline'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                payload:
                  $ref: '#/definitions/response.Timeline'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: To do get data timeline
      tags:
      - Calendar
  /company:
    post:
      consumes:
      - application/json
      parameters:
      - description: json req body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.CreateCompany'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: To do create new election
      tags:
      - Company
  /company/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete Company
      tags:
      - Company
    get:
      consumes:
      - application/json
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                payload:
                  $ref: '#/definitions/response.Company'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: To do get a user
      tags:
      - Company
    put:
      consumes:
      - application/json
      parameters:
      - description: Company ID
        in: path
        name: id
        required: true
        type: string
      - description: json req body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.UpdateCompany'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: To do update a company
      tags:
      - Company
  /item:
    post:
      consumes:
      - application/json
      parameters:
      - description: json req body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.CreateItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: To do create new item
      tags:
      - Item
  /item/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete Item
      tags:
      - Item
    get:
      consumes:
      - application/json
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                payload:
                  $ref: '#/definitions/response.Item'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: To do get a user
      tags:
      - Item
    put:
      consumes:
      - application/json
      parameters:
      - description: Item ID
        in: path
        name: id
        required: true
        type: string
      - description: json req body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.UpdateItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: To do update a item
      tags:
      - Item
  /item/list:
    post:
      consumes:
      - application/json
      parameters:
      - description: payload
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.ListItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                payload:
                  items:
                    $ref: '#/definitions/response.List'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: List Item
      tags:
      - Item
  /item/page:
    post:
      consumes:
      - application/json
      parameters:
      - description: payload
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.PageItem'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                payload:
                  $ref: '#/definitions/response.Pagination'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Page Item
      tags:
      - Item
  /property:
    post:
      consumes:
      - application/json
      parameters:
      - description: json req body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.CreateProperty'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: To do create new property
      tags:
      - Property
  /property/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: Property ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Delete Property
      tags:
      - Property
    get:
      consumes:
      - application/json
      parameters:
      - description: Property ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                payload:
                  $ref: '#/definitions/response.Property'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: To do get a user
      tags:
      - Property
    put:
      consumes:
      - application/json
      parameters:
      - description: Property ID
        in: path
        name: id
        required: true
        type: string
      - description: json req body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.UpdateProperty'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: To do update a property
      tags:
      - Property
  /property/list:
    post:
      consumes:
      - application/json
      parameters:
      - description: payload
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.ListProperty'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                payload:
                  items:
                    $ref: '#/definitions/response.List'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: List Property
      tags:
      - Property
  /property/page:
    post:
      consumes:
      - application/json
      parameters:
      - description: payload
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.PageProperty'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                payload:
                  $ref: '#/definitions/response.Pagination'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - BearerAuth: []
      summary: Page Property
      tags:
      - Property
  /sign-in:
    post:
      consumes:
      - application/json
      parameters:
      - description: json req body
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/request.Signin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Sign in a user
      tags:
      - Authentication
  /user/{id}:
    get:
      consumes:
      - application/json
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                payload:
                  $ref: '#/definitions/response.User'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: To do get a user
      tags:
      - User
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
